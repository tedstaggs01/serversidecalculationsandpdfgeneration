<head>
  <link rel="stylesheet" href="/css/form.css">
</head>
    <div class="card mx-2" id="content">
      <div class="alert alert-success" role="alert">
          <strong>HEADS UP!</strong> This is a TESTING PHASE â€” Please report any difficulties or abnormals: <a href="tel:+352621232202" class="alert-link">+352 621 23 22 02</a>
      </div>
      <div class="mb-form">
        <h6>Select desired airplane profile:</h6>
        <select class="form-select" name="airplanes" id="list">
          <option value="lxaib">LX-AIB [P28A]</option>
          <option value="lxaif">LX-AIF [P28A]</option>
          <option value="lxaig">LX-AIG [P28A]</option>
          <option value="lxaiw">LX-AIW [P28A]</option>
          <option value="lxaic">LX-AIC [C172L]</option>
          <option value="lxaid">LX-AID[C172N]</option>
          <option value="lxaiz">LX-AIZ [C172N]</option>
          <option value="lxaie">LX-AIE [C172S]</option>
          <option value="lxaio">LX-AIO [C172S]</option>
          <option value="lxaix">LX-AIX [C182Q]</option>
          <option value="lxaim">LX-AIM [PA-44]</option>
        </select>
        <br>
        <br>
        <div class="text-center">
          <h4>MASS AND BALANCE: <span id="test"></span></h4>
          <span class="badge badge-soft-success">Read the <a href="/aerosportdoc">Documentation</a> before proceeding!</span>
        </div>
        <hr>
        <div class="form-group">
          <label><h6>Enter <span class="badge badge-soft-primary">Crew</span> mass (kg):</h6></label>
          <input type="number" class="form-control" id="crew" placeholder="Crew station">
        </div>
        <div class="form-group">
          <label><h6>Enter <span class="badge badge-soft-primary">Pax</span> mass (kg):</h6></label>
          <input type="number" class="form-control" id="pax" placeholder="Pax station">
        </div>
        <div class="form-group">
          <label><h6>Enter <span class="badge badge-soft-primary">Baggage</span> mass (kg):</h6></label>
          <input type="number" class="form-control" id="baggage" placeholder="Baggage station">
        </div>
        <h5><span id="zfm">Zero Fuel Mass</span></h5>
        <hr>
        <div class="form-group">
          <label><h6>Enter <span class="badge badge-soft-primary">Fuel</span> mass (kg):</h6></label>
          <input type="number" class="form-control" id="fuel" placeholder="Fuel station">
        </div>
        <h5><span id="ramp">Ramp Mass</span></h5>
        <hr>
        <div class="form-group">
          <label><h6>Enter <span class="badge badge-soft-primary">Taxi</span> mass (kg):</h6></label>
          <input type="number" class="form-control" id="taxi" placeholder="Fuel station">
        </div>
        <h5><span id="tom">Take-off Mass</span></h5>
        <hr>
        <div class="form-group">
          <label><h6>Enter <span class="badge badge-soft-primary">Trip</span> mass (kg):</h6></label>
          <input type="number" class="form-control" id="trip" placeholder="Fuel station">
        </div>
        <h5><span id="lm">Landing Mass</span></h5>
        <hr>
        <div class="text-center">
          <h6><span class="badge badge-success"><span id="remUsefukL">Remaining Useful Load</span></h6>
        </div>
        <br>
        <br>
        <div class="buttons">
          <div class="text-center">
            <form method="post" action="/increment">
              <button class="btn btn-primary" type="submit" id="calc">Calculate</button>
            </form>
            <br>
            <br>
            <div class="terms-calc">
              <p>Be aware, PILOT FLOW is not liable for any information provided! This is for entertainment purposes only! Recalculation is strongly advised! Review our: <a href="/legal">Terms and Conditions</a>!</p>
            </div>
          </div>
        </div>
        <div class="card mx-2">
          <div class="canvas">
            <canvas id="myChart"></canvas>
          </div>
        </div>
        <br>
        <div class="text-center">
          <button id="generatePDFButton">Generate PDF</button>
        </div>
        <br>
      </div>
    </div>
    <script>
      let selected;

      function getselectvalue() {
        const selectedvalue = document.getElementById("list").value;
        selected = data[selectedvalue];
        document.getElementById("test").innerHTML = selected.name;
      }
      
      function zfm() { // change name of function
        // ZFM: MASS / CG + Limitation
        const bem = selected.bem; 
        const bemcg = selected.bemcg;
        const bemmo = bem * bemcg; 
        const crew = parseFloat(document.getElementById("crew").value);
        const crewcg = selected.crewcg; 
        const crewmo = crew * crewcg; 
        const pax = parseFloat(document.getElementById("pax").value);
        const paxcg = selected.paxcg; 
        const paxmo = pax * paxcg; 
        const bag = parseFloat(document.getElementById("baggage").value);
        if (bag > selected.maxbag){
          alert("Check baggage compartment mass limitation!"); 
          document.getElementById("baggage").style.color = "red";
        }
        const bagcg = selected.bagcg; 
        const bagmo = bag * bagcg; 
        const zfm = bem + crew + pax + bag;
        const zfmmo = bemmo + crewmo + paxmo + bagmo; 
        const zfmcg = zfmmo / zfm;
        const zfmlbs = zfm * 2.205;
        const zfmcgin = zfmcg * 39.37; 
        document.getElementById("zfm").innerHTML = "Zero Fuel Mass: " + zfm.toFixed(2) + " kg" + " (" + zfmlbs.toFixed(2) + " lbs) | C.G.: " + zfmcg.toFixed(2) + " m (" + zfmcgin.toFixed(2) + " in)";
        // RAMP: MASS / CG + Limitation
        const fuel = parseFloat(document.getElementById("fuel").value);
        const fuelcg = selected.fuelcg;
        const fuelmo = fuel * fuelcg; 
        const ramp = zfm + fuel; 
        const rampmo = zfmmo + fuelmo; 
        const rampcg = rampmo / ramp; 
        if (ramp > selected.maxramp) {
          alert("Check Ramp Mass limitation!"); 
          document.getElementById("ramp").style.color = "red";
        }
        if (fuel > selected.maxfuel){
          alert("Check Fuel Capacity Limitation!")
          document.getElementById("ramp").style.color = "red";
        }
        const ramplbs = ramp * 2.205;
        const rampcgin = rampcg * 39.37; 
        document.getElementById("ramp").innerHTML = "Ramp Mass: " + ramp.toFixed(2) + " kg" + " (" + ramplbs.toFixed(2) + " lbs) | C.G.: " + rampcg.toFixed(2) + " m (" + rampcgin.toFixed(2) + " in)";
        // TOM: MASS / CG 
        const taxi = parseFloat(document.getElementById("taxi").value); 
        const taxicg = selected.fuelcg; 
        const taximo = taxi * taxicg; 
        const tom = ramp - taxi; 
        const tommo = rampmo - taximo; 
        const tomcg = tommo / tom; 
        if (tom > selected.maxtom) {
          alert("Check Ramp Mass Limitation!"); 
          document.getElementById("tom").style.color = "red";
        }
        const tomlbs = tom * 2.205;
        const tomcgin = tomcg * 39.37; 
        document.getElementById("tom").innerHTML = "Take-off Mass: " + tom.toFixed(2) + " kg" + " (" + tomlbs.toFixed(2) + " lbs) | C.G.: " + tomcg.toFixed(2) + " m (" + tomcgin.toFixed(2) + " in)";
        // LM: MASS / CG 
        const trip = parseFloat(document.getElementById("trip").value);
        const tripcg = selected.fuelcg; 
        const tripmo = trip * tripcg; 
        const lm = tom - trip; 
        const lmmo = tommo - tripmo; 
        const lmcg = lmmo / lm; 
        if (lm > selected.maxlm) {
          alert("Check Landing Mass Limitation!"); 
          document.getElementById("lm").style.color = "red";
        }
        const lmlbs = lm * 2.205;
        const lmcgin = lmcg * 39.37; 
        document.getElementById("lm").innerHTML = "Landing Mass: " + lm.toFixed(2) + " kg" + " (" + lmlbs.toFixed(2) + " lbs) | C.G.: " + lmcg.toFixed(2) + " m (" + lmcgin.toFixed(2) + " in)";
        // Useful Load: RampW - BemW
        const remUsefulL = selected.maxramp - ramp;
        const remUsefukLlbs = remUsefulL * 2.205;  
        document.getElementById("remUsefukL").innerHTML = "Remaining Useful Load: " + remUsefulL.toFixed(2) + " kg" + " (" + remUsefukLlbs.toFixed(2) + " lbs)" + "(Re-check C.G.!)"; 
      
        // CG graph 
      
        var envelope = [
          {x:selected.maxfwdcgL, y: selected.minmL},
          {x:selected.maxfwdcgL, y:selected.minmLH},
          {x:selected.maxfwdcgH, y:selected.minmHH},
          {x:selected.maxfwdcgHH, y:selected.minmHHH},
          {x:selected.maxaftcg, y:selected.minmHHH},
          {x:selected.maxaftcg, y:selected.minmL},
          {x:selected.maxfwdcgL, y:selected.minmL}
        ];
      
        var utility = [
          {x:selected.maxfwdcgUL , y:selected.minUL},
          {x:selected.maxfwdcgUL, y:selected.minUH},
          {x:selected.maxfwdcgUH, y:selected.minUHH},
          {x:selected.maxaftcgU, y: selected.minUHH},
          {x:selected.maxaftcgU, y: selected.minUL},
        ];
        
        var mb = [
          {x:rampcgin , y:ramplbs},
          {x:tomcgin, y: tomlbs},
          {x:lmcgin, y: lmlbs}, 
          {x:zfmcgin, y: zfmlbs}
        ]
        
        new Chart("myChart", {
          type: "scatter",
          data: {
            datasets: [{
              label: selected.name,
              pointRadius: 4,
              pointBackgroundColor: "rgb(0,0,255)",
              data: envelope,
              showLine: true,
              fill: true
            },
            {
              label: "Utility",
              pointRadius: 4,
              pointBackgroundColor: "rgb(255, 36, 0,)",
              data: utility,
              showLine: true,
              fill: true
            },
            {
              label: "Data",
              pointRadius: 4,
              pointBackgroundColor: "rgb(0,0,255)",
              data: mb,
              showLine: true,
            }
          ]
          },
          options: {
            legend: {display: true},
            scales: {
              xAxes: [{ticks: {min: 80, max:90}}],
              yAxes: [{ticks: {min: 1000, max:2500}}],
            }
          }
        });
      }
      
      getselectvalue();
      
      const calc = document.querySelector("#calc");
      const planes = document.querySelector("#list");
      
      calc.addEventListener("click",zfm);
      planes.addEventListener("change",getselectvalue);
      
      

    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/js/aerosport_data.js"></script>
  <!--<script src="/js/aerosport_calc.js"></script>-->
    <script src="/js/pdf-gen-aerosport.js"></script>